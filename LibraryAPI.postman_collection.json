{
	"info": {
		"_postman_id": "f73c4419-363e-4eaa-9650-270c40d7d96b",
		"name": "Library API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7587907"
	},
	"item": [
		{
			"name": "Endpoint available",
			"item": [
				{
					"name": "Endpoint Available",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
									"    // Test to check that the response status code is 200",
									"    pm.expect(pm.response.code).to.equal(200);",
									"",
									"",
									"    pm.test(\"Status field should not be null\", function () {",
									"        const responseData = pm.response.json();",
									"",
									"        pm.expect(responseData).to.be.an('object');",
									"        pm.expect(responseData.status).to.exist.and.to.not.be.null;",
									"    });",
									"",
									"    pm.test(\"The Status field contains only allowed values\", function () {",
									"        const responseData = pm.response.json();",
									"        const allowedValues = [\"OK\"];",
									"",
									"        pm.expect(responseData).to.be.an('object');",
									"        pm.expect(responseData.status).to.exist;",
									"        pm.expect(allowedValues).to.include(responseData.status);",
									"    });",
									"",
									"    pm.test(\"Response time is less than 500ms\", function () {",
									"        pm.expect(pm.response.responseTime).to.be.below(500);",
									"    });",
									"} else {",
									"    // Print actual content type",
									"    console.log(\"Actual Content-Type:\", pm.response.headers.get(\"Content-Type\")); // This will log the content type to the console",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base url}}/status",
							"host": [
								"{{Base url}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Register a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.accessToken).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"AccessToken should not be empty\");",
									"    ",
									"    // Save the access token to environment variables",
									"    pm.environment.set(\"accessToken\", jsonData.accessToken); ",
									"}",
									"",
									"pm.test(\"Response status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Response should contain only the accessToken field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('accessToken');",
									"});",
									"",
									"pm.test(\"Content-Type header is correctly set to application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientName\": \"{{$randomFirstName}}\",\n    \"clientEmail\":\"{{$randomEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base url}}/api-clients",
							"host": [
								"{{Base url}}"
							],
							"path": [
								"api-clients"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Books",
			"item": [
				{
					"name": "List of books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is JSON and status is OK\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"if (pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty; // Ensure jsonData is an array and not empty",
									"    pm.expect(jsonData[0].id).to.not.be.undefined; // Check for id instead of token",
									"",
									"    pm.test(\"Body matches string\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"fiction\");",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base url}}/books",
							"host": [
								"{{Base url}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single book - available",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is JSON and status is OK\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"if (pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object'); // Updated to check if jsonData is an object",
									"    pm.expect(jsonData.id).to.not.be.undefined;",
									"",
									"    console.log(jsonData);",
									"",
									"    pm.test(\"Book is fiction\", function () {",
									"        pm.expect(jsonData.type).to.eql('fiction'); // Fixed to access the correct property",
									"    });",
									"",
									"    pm.test(\"Stock available\", () =>{",
									"        pm.expect(jsonData[\"current-stock\"]).to.be.above(0);",
									"        console.log(\"El stock actual es de: \" + jsonData[\"current-stock\"])",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://simple-books-api.glitch.me/books/:bookId",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"books",
								":bookId"
							],
							"variable": [
								{
									"key": "bookId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single book - NonAvailable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is JSON and status is OK\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"if (pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object'); // Updated to check if jsonData is an object",
									"    pm.expect(jsonData.id).to.not.be.undefined;",
									"",
									"    console.log(jsonData);",
									"",
									"    pm.test(\"Stock available\", () =>{",
									"        pm.expect(jsonData[\"current-stock\"]).to.be.eq(0); // Fixed syntax error",
									"        console.log(\"El stock actual es de: \" + jsonData[\"current-stock\"]);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base url}}/books/:bookId",
							"host": [
								"{{Base url}}"
							],
							"path": [
								"books",
								":bookId"
							],
							"variable": [
								{
									"key": "bookId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a bookID- NonAvailable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"        throw new Error(\"Status code no es 200\");",
									"        return;",
									"        }",
									"const contentType = pm.response.headers.get(\"Content-Type\");",
									"",
									"if(contentType.includes(!\"application/json\")){",
									"    throw new Error(\"Content Type different from json, es: \"+ contentType );",
									"    return;",
									"}else{console.log(\"content/type= \" + contentType)}",
									"",
									"try{  ",
									"",
									"const response = pm.response.json();",
									"const nonFictionBook = response.filter((book) => book.available === true);",
									"const book = nonFictionBook[0];",
									"",
									"pm.test(\"Book Found\", () =>{",
									"    pm.expect(book).to.be.an('object');",
									"    pm.expect(book.available).to.eql(true);",
									"    pm.globals.set(\"bookId\", book.id);",
									"",
									"});",
									"",
									"pm.test(\"Book Name is correct\", ()=>{",
									"    pm.expect(nonFictionBook[1].name === \"The Russian\")",
									"})",
									"",
									"const connectionHeader = pm.response.headers.get(\"Connection\");",
									"",
									"pm.test(\" Connection Request Header\", () => {",
									"    pm.expect(connectionHeader).not.to.be.undefined;",
									"",
									"}) ",
									"",
									"const contentLenght = pm.response.headers.get(\"contentLenght\");",
									"",
									"pm.test(\"Content Lenght minor than 1000\", ()=> {",
									"    pm.expect(contentLenght < 1000)",
									"})",
									"    }",
									"catch(e){",
									"",
									"console.error(\"Error: endpoint non available: \", e.message);",
									"}",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base url}}/books",
							"host": [
								"{{Base url}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON",
									"const response = pm.response.json();",
									"",
									"// Test for status code",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test for response time",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Test for response body being an array",
									"pm.test(\"Response body is an array\", () => {",
									"    pm.expect(response).to.be.an('array');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base url}}/orders/",
							"host": [
								"{{Base url}}"
							],
							"path": [
								"orders",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Save orderId in environment variables",
									"pm.environment.set(\"orderId\", response.orderId);",
									"",
									"// Test for status code",
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Test for response time",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});",
									"",
									"// Test for response body properties",
									"pm.test(\"Response body has created property\", () => {",
									"    pm.expect(response).to.have.property('created');",
									"    pm.expect(response.created).to.be.a('boolean');",
									"});",
									"",
									"pm.test(\"Response body has orderId property\", () => {",
									"    pm.expect(response).to.have.property('orderId');",
									"    pm.expect(response.orderId).to.be.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": 5,\n  \"customerName\": \"{{$randomFirstName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base url}}/orders",
							"host": [
								"{{Base url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.environment.set(\"customerName\", response.customerName); // Fixed to read from response",
									"",
									"// Test for status code",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test for response time",
									"pm.test(\"Response time is less than 300ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Test for content-type header",
									"pm.test(\"Content-Type is application/json\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Test for response body properties",
									"pm.test(\"Response body has required properties\", () => {",
									"    pm.expect(response).to.have.all.keys(\"id\", \"bookId\", \"customerName\", \"createdBy\", \"quantity\", \"timestamp\");",
									"});",
									"",
									"// Test for data types of properties",
									"pm.test(\"Data types of properties are correct\", () => {",
									"    pm.expect(response.id).to.be.a(\"string\");",
									"    pm.expect(response.bookId).to.be.a(\"number\");",
									"    pm.expect(response.customerName).to.be.a(\"string\");",
									"    pm.expect(response.createdBy).to.be.a(\"string\");",
									"    pm.expect(response.quantity).to.be.a(\"number\");",
									"    pm.expect(response.timestamp).to.be.a(\"number\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base url}}/orders/:orderId",
							"host": [
								"{{Base url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the response status code is 200 or 204",
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"",
									"// Check if the response time is less than 500ms",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Check if the response headers contain 'Connection'",
									"pm.test(\"Response headers contain 'Connection'\", function () {",
									"    pm.expect(pm.response.headers.has(\"Connection\")).to.be.true;",
									"});",
									"",
									"// Check if the response headers contain 'x-powered-by'",
									"pm.test(\"Response headers contain 'x-powered-by'\", function () {",
									"    pm.expect(pm.response.headers.has(\"x-powered-by\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"customerName\": \"{{customerName}}\"}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base url}}/orders/:ordersId",
							"host": [
								"{{Base url}}"
							],
							"path": [
								"orders",
								":ordersId"
							],
							"variable": [
								{
									"key": "ordersId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the response status code is 200 or 204",
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"// Check if the response time is less than 2000ms",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"// Check if the Content-Type header is not present",
									"pm.test(\"Content-Type header is not present\", function () {",
									"    pm.expect(pm.response.headers.has('Content-Type')).to.be.false;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{Base url}}/orders/:orderId",
							"host": [
								"{{Base url}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Base url",
			"value": "",
			"type": "default"
		}
	]
}